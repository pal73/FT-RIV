; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\uart0.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\uart0.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x --omf_browse=.\EXE\uart0.crf uart0.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  crc_87 PROC
;;;75     //-----------------------------------------------
;;;76     char crc_87(char* ptr,char num)
000000  b530              PUSH     {r4,r5,lr}
;;;77     {
;;;78     char r,j;
;;;79     r=*ptr;
000002  7803              LDRB     r3,[r0,#0]
;;;80     
;;;81     for(j=1;j<num;j++)
000004  f04f0201          MOV      r2,#1
;;;82     	{
;;;83          ptr++;
;;;84     	r=((*ptr)^Table87[r]);
000008  4cff              LDR      r4,|L1.1032|
00000a  e008              B        |L1.30|
                  |L1.12|
00000c  f1000001          ADD      r0,r0,#1              ;83
000010  5ce3              LDRB     r3,[r4,r3]
000012  7805              LDRB     r5,[r0,#0]
000014  ea850303          EOR      r3,r5,r3
000018  f1020201          ADD      r2,r2,#1              ;81
00001c  b2d2              UXTB     r2,r2                 ;81
                  |L1.30|
00001e  428a              CMP      r2,r1                 ;81
000020  d3f4              BCC      |L1.12|
;;;85     	}
;;;86     
;;;87     return r;	
000022  4618              MOV      r0,r3
;;;88     } 
000024  bd30              POP      {r4,r5,pc}
;;;89     
                          ENDP

                  crc_95 PROC
;;;90     //-----------------------------------------------
;;;91     char crc_95(char* ptr,char num)
000026  b530              PUSH     {r4,r5,lr}
;;;92     {
;;;93     char r,j;
;;;94     r=*ptr;
000028  7803              LDRB     r3,[r0,#0]
;;;95     
;;;96     for(j=1;j<num;j++)
00002a  f04f0201          MOV      r2,#1
;;;97     	{
;;;98          ptr++;
;;;99     	r=((*ptr)^Table95[r]);
00002e  4cf7              LDR      r4,|L1.1036|
000030  e008              B        |L1.68|
                  |L1.50|
000032  f1000001          ADD      r0,r0,#1              ;98
000036  5ce3              LDRB     r3,[r4,r3]
000038  7805              LDRB     r5,[r0,#0]
00003a  ea850303          EOR      r3,r5,r3
00003e  f1020201          ADD      r2,r2,#1              ;96
000042  b2d2              UXTB     r2,r2                 ;96
                  |L1.68|
000044  428a              CMP      r2,r1                 ;96
000046  d3f4              BCC      |L1.50|
;;;100    	}
;;;101    
;;;102    return r;	
000048  4618              MOV      r0,r3
;;;103    }
00004a  bd30              POP      {r4,r5,pc}
;;;104    
                          ENDP

                  putchar0 PROC
;;;106    //-----------------------------------------------
;;;107    void putchar0(char c)
00004c  b530              PUSH     {r4,r5,lr}
;;;108    {
;;;109    while (tx_counter0 == TX_BUFFER_SIZE0);
00004e  4bf0              LDR      r3,|L1.1040|
000050  f44f6480          MOV      r4,#0x400
000054  89d9              LDRH     r1,[r3,#0xe]
                  |L1.86|
000056  42a1              CMP      r1,r4
000058  d0fd              BEQ      |L1.86|
;;;110    if (tx_counter0 || ((LPC_UART0->LSR & 0x60)==0))
00005a  b931              CBNZ     r1,|L1.106|
00005c  4aed              LDR      r2,|L1.1044|
00005e  7d15              LDRB     r5,[r2,#0x14]
000060  f0150f60          TST      r5,#0x60
000064  d001              BEQ      |L1.106|
;;;111       {
;;;112       tx_buffer0[tx_wr_index0]=c;
;;;113       if (++tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;;;114       ++tx_counter0;
;;;115       }
;;;116    else LPC_UART0->THR=c;
000066  7010              STRB     r0,[r2,#0]
;;;117    }
000068  bd30              POP      {r4,r5,pc}
                  |L1.106|
00006a  4deb              LDR      r5,|L1.1048|
00006c  895a              LDRH     r2,[r3,#0xa]          ;112  ; tx_wr_index0
00006e  54a8              STRB     r0,[r5,r2]            ;112
000070  1c52              ADDS     r2,r2,#1              ;113
000072  b290              UXTH     r0,r2                 ;113
000074  8158              STRH     r0,[r3,#0xa]          ;113
000076  42a0              CMP      r0,r4                 ;113
000078  d102              BNE      |L1.128|
00007a  f04f0000          MOV      r0,#0                 ;113
00007e  8158              STRH     r0,[r3,#0xa]          ;113
                  |L1.128|
000080  f1010101          ADD      r1,r1,#1              ;114
000084  81d9              STRH     r1,[r3,#0xe]          ;114
000086  bd30              POP      {r4,r5,pc}
;;;118    
                          ENDP

                  uart_out_adr0 PROC
;;;167    //-----------------------------------------------
;;;168    void uart_out_adr0 (char *ptr, char len)
000088  b570              PUSH     {r4-r6,lr}
;;;169    {
00008a  b08f              SUB      sp,sp,#0x3c
;;;170    char UOB[60]/*={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}*/;
;;;171    char i,t=0;
00008c  f04f0300          MOV      r3,#0
;;;172    
;;;173    //rs232_data_out_buff[4]=210;
;;;174    
;;;175    for(i=0;i<len;i++)
000090  461a              MOV      r2,r3
000092  466d              MOV      r5,sp                 ;170
000094  e006              B        |L1.164|
                  |L1.150|
;;;176    	{
;;;177    	UOB[i]=ptr[i];
000096  5c84              LDRB     r4,[r0,r2]
000098  54ac              STRB     r4,[r5,r2]
;;;178    	t^=UOB[i];
00009a  ea840303          EOR      r3,r4,r3
00009e  f1020201          ADD      r2,r2,#1              ;175
0000a2  b2d2              UXTB     r2,r2                 ;175
                  |L1.164|
0000a4  428a              CMP      r2,r1                 ;175
0000a6  d3f6              BCC      |L1.150|
;;;179    	}
;;;180    //if(!t)t=0xff;
;;;181    //UOB[8]=5;
;;;182    //UOB[9]=6;
;;;183    UOB[10]=200;
0000a8  f04f00c8          MOV      r0,#0xc8
0000ac  f88d000a          STRB     r0,[sp,#0xa]
;;;184    //UOB[11]=8;
;;;185    UOB[len]=len;
0000b0  5469              STRB     r1,[r5,r1]
;;;186    t^=len;	
0000b2  ea830301          EOR      r3,r3,r1
;;;187    UOB[len+1]=t;	
0000b6  eb050001          ADD      r0,r5,r1
0000ba  7043              STRB     r3,[r0,#1]
;;;188    UOB[len+2]=END;
0000bc  f04f020a          MOV      r2,#0xa
0000c0  7082              STRB     r2,[r0,#2]
;;;189    //UOB[0]=i+1;
;;;190    //UOB[i]=t^UOB[0];
;;;191    //UOB[i+1]=END;
;;;192    	
;;;193    //puts(UOB); 
;;;194    for (i=0;i<len+3;i++)
0000c2  f04f0400          MOV      r4,#0
0000c6  f1010603          ADD      r6,r1,#3
0000ca  e005              B        |L1.216|
                  |L1.204|
;;;195    	{
;;;196    	putchar0(UOB[i]);
0000cc  5d28              LDRB     r0,[r5,r4]
0000ce  f7fffffe          BL       putchar0
0000d2  f1040401          ADD      r4,r4,#1              ;194
0000d6  b2e4              UXTB     r4,r4                 ;194
                  |L1.216|
0000d8  42b4              CMP      r4,r6                 ;194
0000da  d3f7              BCC      |L1.204|
;;;197    	}   
;;;198    }
0000dc  b00f              ADD      sp,sp,#0x3c
0000de  bd70              POP      {r4-r6,pc}
;;;199    
                          ENDP

                  UARTInit PROC
;;;386    //-----------------------------------------------
;;;387    uint32_t UARTInit( uint32_t PortNum, uint32_t baudrate )
0000e0  e92d47f0          PUSH     {r4-r10,lr}
;;;388    {
;;;389    uint32_t Fdiv;
;;;390    uint32_t pclkdiv, pclk;
;;;391    
;;;392    
;;;393    
;;;394    if ( PortNum == 0 )
;;;395      	{
;;;396    	LPC_PINCON->PINSEL0 &= ~0x000000F0;
;;;397    	LPC_PINCON->PINSEL0 |= 0x00000050;  /* RxD0 is P0.3 and TxD0 is P0.2 */
;;;398    	/* By default, the PCLKSELx value is zero, thus, the PCLK for
;;;399    	all the peripherals is 1/4 of the SystemFrequency. */
;;;400    	/* Bit 6~7 is for UART0 */
;;;401    	pclkdiv = (LPC_SC->PCLKSEL0 >> 6) & 0x03;
;;;402    	switch ( pclkdiv )
;;;403    		{
;;;404    	  	case 0x00:
;;;405    	  	default:
;;;406    		pclk = SystemFrequency/4;
0000e4  4acf              LDR      r2,|L1.1060|
0000e6  f8df8334          LDR      r8,|L1.1052|
0000ea  f8df9334          LDR      r9,|L1.1056|
0000ee  6812              LDR      r2,[r2,#0]
0000f0  2603              MOVS     r6,#3                 ;390
;;;407    		break;
;;;408    	  	case 0x01:
;;;409    		pclk = SystemFrequency;
;;;410    		break; 
;;;411    	  	case 0x02:
;;;412    		pclk = SystemFrequency/2;
;;;413    		break; 
;;;414    	  	case 0x03:
;;;415    		pclk = SystemFrequency/8;
;;;416    		break;
;;;417    		}
;;;418    
;;;419        	LPC_UART0->LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
0000f2  2783              MOVS     r7,#0x83
;;;420    	Fdiv = ( pclk / 16 ) / baudrate ;	/*baud rate */
;;;421        	LPC_UART0->DLM = Fdiv / 256;							
;;;422        	LPC_UART0->DLL = Fdiv % 256;
;;;423    	LPC_UART0->LCR = 0x03;		/* DLAB = 0 */
;;;424        	LPC_UART0->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
0000f4  2507              MOVS     r5,#7
0000f6  0893              LSRS     r3,r2,#2              ;406
0000f8  0854              LSRS     r4,r2,#1              ;412
0000fa  ea4f0cd2          LSR      r12,r2,#3             ;415
0000fe  b120              CBZ      r0,|L1.266|
;;;425    
;;;426       	NVIC_EnableIRQ(UART0_IRQn);
;;;427    
;;;428        	LPC_UART0->IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART0 interrupt */
;;;429        	return (TRUE);
;;;430      	}
;;;431    else if ( PortNum == 1 )
000100  2801              CMP      r0,#1
000102  d030              BEQ      |L1.358|
;;;432      	{
;;;433    	LPC_PINCON->PINSEL4 &= ~0x0000000F;
;;;434    	LPC_PINCON->PINSEL4 |= 0x0000000A;	/* Enable RxD1 P2.1, TxD1 P2.0 */
;;;435    	
;;;436    	/* By default, the PCLKSELx value is zero, thus, the PCLK for
;;;437    	all the peripherals is 1/4 of the SystemFrequency. */
;;;438    	/* Bit 8,9 are for UART1 */
;;;439    	pclkdiv = (LPC_SC->PCLKSEL0 >> 8) & 0x03;
;;;440    	switch ( pclkdiv )
;;;441    		{
;;;442    	  	case 0x00:
;;;443    	  	default:
;;;444    		pclk = SystemFrequency/4;
;;;445    		break;
;;;446    	  	case 0x01:
;;;447    		pclk = SystemFrequency;
;;;448    		break; 
;;;449    	  	case 0x02:
;;;450    		pclk = SystemFrequency/2;
;;;451    		break; 
;;;452    	  	case 0x03:
;;;453    		pclk = SystemFrequency/8;
;;;454    		break;
;;;455    		}
;;;456    
;;;457        	LPC_UART1->LCR = 0x83;		/* 8 bits, no Parity, 1 Stop bit */
;;;458    	Fdiv = ( pclk / 16 ) / baudrate ;	/*baud rate */
;;;459        	LPC_UART1->DLM = Fdiv / 256;							
;;;460        	LPC_UART1->DLL = Fdiv % 256;
;;;461    	LPC_UART1->LCR = 0x03;		/* DLAB = 0 */
;;;462        	LPC_UART1->FCR = 0x07;		/* Enable and reset TX and RX FIFO. */
;;;463    
;;;464       	NVIC_EnableIRQ(UART1_IRQn);
;;;465    
;;;466        	LPC_UART1->IER = IER_RBR | IER_THRE | IER_RLS;	/* Enable UART1 interrupt */
;;;467        	return (TRUE);
;;;468      	}
;;;469    return( FALSE ); 
000104  2000              MOVS     r0,#0
                  |L1.262|
;;;470    }
000106  e8bd87f0          POP      {r4-r10,pc}
                  |L1.266|
00010a  f8d80000          LDR      r0,[r8,#0]            ;396
00010e  f02000f0          BIC      r0,r0,#0xf0           ;396
000112  f8c80000          STR      r0,[r8,#0]            ;396
000116  f8d80000          LDR      r0,[r8,#0]            ;397
00011a  f0400050          ORR      r0,r0,#0x50           ;397
00011e  f8c80000          STR      r0,[r8,#0]            ;397
000122  f8d901a8          LDR      r0,[r9,#0x1a8]        ;401
000126  f3c01081          UBFX     r0,r0,#6,#2           ;401
00012a  2801              CMP      r0,#1                 ;402
00012c  d008              BEQ      |L1.320|
00012e  2802              CMP      r0,#2                 ;402
000130  d003              BEQ      |L1.314|
000132  2803              CMP      r0,#3                 ;402
000134  d003              BEQ      |L1.318|
000136  461a              MOV      r2,r3                 ;406
000138  e002              B        |L1.320|
                  |L1.314|
00013a  4622              MOV      r2,r4                 ;412
00013c  e000              B        |L1.320|
                  |L1.318|
00013e  4662              MOV      r2,r12                ;415
                  |L1.320|
000140  4cb4              LDR      r4,|L1.1044|
000142  7327              STRB     r7,[r4,#0xc]          ;419
000144  ea4f1012          LSR      r0,r2,#4              ;420
000148  fbb0f0f1          UDIV     r0,r0,r1              ;420
00014c  ea4f2110          LSR      r1,r0,#8              ;421
000150  7121              STRB     r1,[r4,#4]            ;421
000152  7020              STRB     r0,[r4,#0]            ;422
000154  7326              STRB     r6,[r4,#0xc]          ;423
000156  7225              STRB     r5,[r4,#8]            ;424
000158  f04f0005          MOV      r0,#5                 ;426
00015c  f7fffffe          BL       NVIC_EnableIRQ
000160  6065              STR      r5,[r4,#4]            ;428
000162  2001              MOVS     r0,#1                 ;429
000164  e7cf              B        |L1.262|
                  |L1.358|
000166  f8d80010          LDR      r0,[r8,#0x10]         ;433
00016a  f020000f          BIC      r0,r0,#0xf            ;433
00016e  f8c80010          STR      r0,[r8,#0x10]         ;433
000172  f8d80010          LDR      r0,[r8,#0x10]         ;434
000176  f040000a          ORR      r0,r0,#0xa            ;434
00017a  f8c80010          STR      r0,[r8,#0x10]         ;434
00017e  f8d901a8          LDR      r0,[r9,#0x1a8]        ;439
000182  f3c02001          UBFX     r0,r0,#8,#2           ;439
000186  2801              CMP      r0,#1                 ;440
000188  d008              BEQ      |L1.412|
00018a  2802              CMP      r0,#2                 ;440
00018c  d003              BEQ      |L1.406|
00018e  2803              CMP      r0,#3                 ;440
000190  d003              BEQ      |L1.410|
000192  461a              MOV      r2,r3                 ;444
000194  e002              B        |L1.412|
                  |L1.406|
000196  4622              MOV      r2,r4                 ;450
000198  e000              B        |L1.412|
                  |L1.410|
00019a  4662              MOV      r2,r12                ;453
                  |L1.412|
00019c  4ca2              LDR      r4,|L1.1064|
00019e  7327              STRB     r7,[r4,#0xc]          ;457
0001a0  ea4f1012          LSR      r0,r2,#4              ;458
0001a4  fbb0f0f1          UDIV     r0,r0,r1              ;458
0001a8  ea4f2110          LSR      r1,r0,#8              ;459
0001ac  7121              STRB     r1,[r4,#4]            ;459
0001ae  7020              STRB     r0,[r4,#0]            ;460
0001b0  7326              STRB     r6,[r4,#0xc]          ;461
0001b2  7225              STRB     r5,[r4,#8]            ;462
0001b4  f04f0006          MOV      r0,#6                 ;464
0001b8  f7fffffe          BL       NVIC_EnableIRQ
0001bc  6065              STR      r5,[r4,#4]            ;466
0001be  2001              MOVS     r0,#1                 ;467
0001c0  e7a1              B        |L1.262|
;;;471    
                          ENDP

                  UART0_IRQHandler PROC
;;;483    //***********************************************
;;;484    void UART0_IRQHandler (void) 
0001c2  e92d5ff0          PUSH     {r4-r12,lr}
;;;485    {
;;;486    uint8_t IIRValue, LSRValue;
;;;487    uint8_t Dummy = Dummy;
;;;488    char /*status,u0iir,*/data;
;;;489    
;;;490    plazma_uart0++;
0001c6  4d92              LDR      r5,|L1.1040|
0001c8  78e8              LDRB     r0,[r5,#3]  ; plazma_uart0
0001ca  f1000001          ADD      r0,r0,#1
0001ce  70e8              STRB     r0,[r5,#3]
;;;491    
;;;492    
;;;493    			
;;;494    IIRValue = LPC_UART0->IIR;
0001d0  f8dfa240          LDR      r10,|L1.1044|
0001d4  f8da0008          LDR      r0,[r10,#8]
;;;495        
;;;496    IIRValue >>= 1;			/* skip pending bit in IIR */
0001d8  ea4f0050          LSR      r0,r0,#1
;;;497    IIRValue &= 0x07;			/* check bit 1~3, interrupt identification */
0001dc  f0000007          AND      r0,r0,#7
;;;498    if ( IIRValue == IIR_RLS )		/* Receive Line Status */
;;;499      	{
;;;500    	LSRValue = LPC_UART0->LSR;
;;;501    
;;;502    	/* Receive Line Status */
;;;503    	if ( LSRValue & (LSR_OE|LSR_PE|LSR_FE|LSR_RXFE|LSR_BI) )
;;;504    		{
;;;505    	  	/* There are errors or break interrupt */
;;;506    	  	/* Read LSR will clear the interrupt */
;;;507    	  	UART0Status = LSRValue;
;;;508    	  	Dummy = LPC_UART0->RBR;		/* Dummy read on RX to clear 
;;;509    							interrupt, then bail out */
;;;510    	  	return;
;;;511    		}
;;;512    	if ( LSRValue & LSR_RDR )	/* Receive Data Ready */			
;;;513    		{
;;;514    		
;;;515    		data=LPC_UART0->RBR;
;;;516    		rx_buffer0[rx_wr_index0]=data;
0001e0  f8df9248          LDR      r9,|L1.1068|
;;;517       		bRXIN0=1;
;;;518       		if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0001e4  f44f6880          MOV      r8,#0x400
0001e8  f04f0601          MOV      r6,#1                 ;517
0001ec  f04f0400          MOV      r4,#0
0001f0  2803              CMP      r0,#3                 ;498
0001f2  d023              BEQ      |L1.572|
;;;519       		if (++rx_counter0 == RX_BUFFER_SIZE0)
;;;520          		{
;;;521          		rx_counter0=0;
;;;522          		rx_buffer_overflow0=1;
;;;523          		}
;;;524    
;;;525    		
;;;526    		}
;;;527      	}
;;;528    else if ( IIRValue == IIR_RDA )	/* Receive Data Available */
0001f4  2802              CMP      r0,#2
0001f6  d041              BEQ      |L1.636|
;;;529      	{
;;;530    	plazma_bat_drv0++;
;;;531    	modbus_plazma++;
;;;532    	while((LPC_UART0->LSR)&0x0001) {	
;;;533    	data=LPC_UART0->RBR;
;;;534    	rx_buffer0[rx_wr_index0]=data;
;;;535       	bRXIN0=1;
;;;536       	if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;;;537       	if (++rx_counter0 == RX_BUFFER_SIZE0)
;;;538          	{
;;;539          	rx_counter0=0;
;;;540          	rx_buffer_overflow0=1;
;;;541          	}
;;;542    	modbus_rx_buffer[modbus_rx_buffer_ptr]=data;
;;;543    	modbus_rx_buffer_ptr++;
;;;544    	modbus_timeout_cnt=0;
;;;545    
;;;546    
;;;547    
;;;548    	
;;;549    
;;;550    	if(data==0x7e)
;;;551    		{
;;;552    		bat_drv_rx_cnt=0;
;;;553    		bat_drv_rx_cnt=0;
;;;554    		}
;;;555    	//if(bat_drv_rx_cnt<50)
;;;556    	bat_drv_rx_buff[bat_drv_rx_cnt++]=data;
;;;557    	//if(bat_drv_rx_cnt==50) bat_drv_rx_in=1; 
;;;558    
;;;559    	if(data==0x0d)
;;;560    		{
;;;561    		if(sacredSunRequestPhase==0)	mem_copy (sacredSunBatteryInBuff, bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;562    		else if(sacredSunRequestPhase==1)	mem_copy (&sacredSunBatteryInBuff[150], bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;563    		sacredSunSilentCnt=0;
;;;564    		}
;;;565    
;;;566    	}
;;;567      	}
;;;568    else if ( IIRValue == IIR_CTI )	/* Character timeout indicator */
0001f8  2806              CMP      r0,#6
0001fa  d07c              BEQ      |L1.758|
;;;569      	{
;;;570    	/* Character Time-out indicator */
;;;571    	UART0Status |= 0x100;		/* Bit 9 as the CTI error */
;;;572      	}
;;;573    else if ( IIRValue == IIR_THRE )	/* THRE, transmit holding register empty */
0001fc  2801              CMP      r0,#1
0001fe  d11b              BNE      |L1.568|
;;;574      	{
;;;575    	/* THRE interrupt */
;;;576    	
;;;577    	plazma_bat_drv1++;
000200  488b              LDR      r0,|L1.1072|
000202  8801              LDRH     r1,[r0,#0]  ; plazma_bat_drv1
000204  f1010101          ADD      r1,r1,#1
000208  8001              STRH     r1,[r0,#0]
;;;578    	LSRValue = LPC_UART0->LSR;		/* Check status in the LSR to see if
00020a  f89a0014          LDRB     r0,[r10,#0x14]
;;;579    									valid data in U0THR or not */
;;;580    	if ( LSRValue & LSR_THRE )
00020e  0680              LSLS     r0,r0,#26
000210  d572              BPL      |L1.760|
;;;581    		{
;;;582    	  	UART0TxEmpty = 1;
000212  702e              STRB     r6,[r5,#0]
;;;583    		if (tx_counter0)
000214  89e8              LDRH     r0,[r5,#0xe]  ; tx_counter0
000216  2800              CMP      r0,#0
000218  d00e              BEQ      |L1.568|
;;;584       			{
;;;585       			--tx_counter0;
00021a  f1a00001          SUB      r0,r0,#1
00021e  81e8              STRH     r0,[r5,#0xe]
;;;586       			LPC_UART0->THR=tx_buffer0[tx_rd_index0];
000220  497d              LDR      r1,|L1.1048|
000222  89a8              LDRH     r0,[r5,#0xc]  ; tx_rd_index0
000224  5c09              LDRB     r1,[r1,r0]
000226  f88a1000          STRB     r1,[r10,#0]
;;;587       			if (++tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
00022a  f1000001          ADD      r0,r0,#1
00022e  b280              UXTH     r0,r0
000230  81a8              STRH     r0,[r5,#0xc]
000232  4540              CMP      r0,r8
000234  d100              BNE      |L1.568|
000236  81ac              STRH     r4,[r5,#0xc]
                  |L1.568|
;;;588       			}
;;;589    		}
;;;590    	else
;;;591    		{
;;;592    	  	UART0TxEmpty = 0;
;;;593    		}
;;;594      	}
;;;595    }
000238  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.572|
00023c  f89a0014          LDRB     r0,[r10,#0x14]        ;500
000240  f0100f9e          TST      r0,#0x9e              ;503
000244  d003              BEQ      |L1.590|
000246  6128              STR      r0,[r5,#0x10]         ;507  ; UART0Status
000248  f89a0000          LDRB     r0,[r10,#0]           ;508
00024c  e7f4              B        |L1.568|
                  |L1.590|
00024e  07c0              LSLS     r0,r0,#31             ;512
000250  d0f2              BEQ      |L1.568|
000252  f89a1000          LDRB     r1,[r10,#0]           ;515
000256  88a8              LDRH     r0,[r5,#4]            ;516  ; rx_wr_index0
000258  f8091000          STRB     r1,[r9,r0]            ;516
00025c  706e              STRB     r6,[r5,#1]            ;517
00025e  1c40              ADDS     r0,r0,#1              ;518
000260  b280              UXTH     r0,r0                 ;518
000262  80a8              STRH     r0,[r5,#4]            ;518
000264  4540              CMP      r0,r8                 ;518
000266  d100              BNE      |L1.618|
000268  80ac              STRH     r4,[r5,#4]            ;518
                  |L1.618|
00026a  8928              LDRH     r0,[r5,#8]            ;519  ; rx_counter0
00026c  1c40              ADDS     r0,r0,#1              ;519
00026e  b280              UXTH     r0,r0                 ;519
000270  8128              STRH     r0,[r5,#8]            ;519
000272  4540              CMP      r0,r8                 ;519
000274  d1e0              BNE      |L1.568|
000276  812c              STRH     r4,[r5,#8]            ;521
000278  70ae              STRB     r6,[r5,#2]            ;522
00027a  e7dd              B        |L1.568|
                  |L1.636|
00027c  486d              LDR      r0,|L1.1076|
00027e  8801              LDRH     r1,[r0,#0]            ;530  ; plazma_bat_drv0
000280  f1010101          ADD      r1,r1,#1              ;530
000284  8001              STRH     r1,[r0,#0]            ;530
000286  486c              LDR      r0,|L1.1080|
000288  8801              LDRH     r1,[r0,#0]            ;531  ; modbus_plazma
00028a  f1010101          ADD      r1,r1,#1              ;531
00028e  8001              STRH     r1,[r0,#0]            ;531
000290  f8dfb1a8          LDR      r11,|L1.1084|
000294  4f6a              LDR      r7,|L1.1088|
000296  e03c              B        |L1.786|
                  |L1.664|
000298  f89a0000          LDRB     r0,[r10,#0]           ;533
00029c  88a9              LDRH     r1,[r5,#4]            ;534  ; rx_wr_index0
00029e  f8090001          STRB     r0,[r9,r1]            ;534
0002a2  706e              STRB     r6,[r5,#1]            ;535
0002a4  1c49              ADDS     r1,r1,#1              ;536
0002a6  b289              UXTH     r1,r1                 ;536
0002a8  80a9              STRH     r1,[r5,#4]            ;536
0002aa  4541              CMP      r1,r8                 ;536
0002ac  d100              BNE      |L1.688|
0002ae  80ac              STRH     r4,[r5,#4]            ;536
                  |L1.688|
0002b0  8929              LDRH     r1,[r5,#8]            ;537  ; rx_counter0
0002b2  1c49              ADDS     r1,r1,#1              ;537
0002b4  b289              UXTH     r1,r1                 ;537
0002b6  8129              STRH     r1,[r5,#8]            ;537
0002b8  4541              CMP      r1,r8                 ;537
0002ba  d101              BNE      |L1.704|
0002bc  812c              STRH     r4,[r5,#8]            ;539
0002be  70ae              STRB     r6,[r5,#2]            ;540
                  |L1.704|
0002c0  4a61              LDR      r2,|L1.1096|
0002c2  4b60              LDR      r3,|L1.1092|
0002c4  7811              LDRB     r1,[r2,#0]            ;542  ; modbus_rx_buffer_ptr
0002c6  5458              STRB     r0,[r3,r1]            ;542
0002c8  f1010101          ADD      r1,r1,#1              ;543
0002cc  7011              STRB     r1,[r2,#0]            ;543
0002ce  495f              LDR      r1,|L1.1100|
0002d0  700c              STRB     r4,[r1,#0]            ;544
0002d2  287e              CMP      r0,#0x7e              ;550
0002d4  d100              BNE      |L1.728|
0002d6  803c              STRH     r4,[r7,#0]            ;552
                  |L1.728|
0002d8  8839              LDRH     r1,[r7,#0]            ;556  ; bat_drv_rx_cnt
0002da  4b5d              LDR      r3,|L1.1104|
0002dc  f1010201          ADD      r2,r1,#1              ;556
0002e0  b292              UXTH     r2,r2                 ;556
0002e2  803a              STRH     r2,[r7,#0]            ;556
0002e4  5458              STRB     r0,[r3,r1]            ;556
0002e6  280d              CMP      r0,#0xd               ;559
0002e8  d113              BNE      |L1.786|
0002ea  f89b0000          LDRB     r0,[r11,#0]           ;561  ; sacredSunRequestPhase
0002ee  b120              CBZ      r0,|L1.762|
0002f0  2801              CMP      r0,#1                 ;562
0002f2  d007              BEQ      |L1.772|
0002f4  e00b              B        |L1.782|
                  |L1.758|
0002f6  e011              B        |L1.796|
                  |L1.760|
0002f8  e015              B        |L1.806|
                  |L1.762|
0002fa  4955              LDR      r1,|L1.1104|
0002fc  4855              LDR      r0,|L1.1108|
0002fe  f7fffffe          BL       mem_copy
000302  e004              B        |L1.782|
                  |L1.772|
000304  4853              LDR      r0,|L1.1108|
000306  4952              LDR      r1,|L1.1104|
000308  3096              ADDS     r0,r0,#0x96           ;562
00030a  f7fffffe          BL       mem_copy
                  |L1.782|
00030e  4852              LDR      r0,|L1.1112|
000310  8004              STRH     r4,[r0,#0]            ;563
                  |L1.786|
000312  f89a0014          LDRB     r0,[r10,#0x14]        ;532
000316  07c0              LSLS     r0,r0,#31             ;532
000318  d1be              BNE      |L1.664|
00031a  e78d              B        |L1.568|
                  |L1.796|
00031c  6928              LDR      r0,[r5,#0x10]         ;571  ; UART0Status
00031e  f4407080          ORR      r0,r0,#0x100          ;571
000322  6128              STR      r0,[r5,#0x10]         ;571  ; UART0Status
000324  e788              B        |L1.568|
                  |L1.806|
000326  702c              STRB     r4,[r5,#0]            ;592
000328  e786              B        |L1.568|
;;;596    
                          ENDP

                  uart_in_an0 PROC
;;;599    //-----------------------------------------------
;;;600    void uart_in_an0(void)
00032a  b5f0              PUSH     {r4-r7,lr}
;;;601    {
00032c  b089              SUB      sp,sp,#0x24
;;;602    
;;;603    
;;;604    
;;;605    if((UIB0[0]=='r')&&(UIB0[1]=='e')&&(UIB0[2]=='a')&&(UIB0[3]=='d')&&(UIB0[6]==crc_87(UIB0,6))&&(UIB0[7]==crc_95(UIB0,6)))
00032e  4c3f              LDR      r4,|L1.1068|
000330  2672              MOVS     r6,#0x72
000332  3c64              SUBS     r4,r4,#0x64
000334  2765              MOVS     r7,#0x65
000336  7820              LDRB     r0,[r4,#0]  ; UIB0
000338  2872              CMP      r0,#0x72
00033a  d163              BNE      |L1.1028|
00033c  7860              LDRB     r0,[r4,#1]  ; UIB0
00033e  2865              CMP      r0,#0x65
000340  d160              BNE      |L1.1028|
000342  78a0              LDRB     r0,[r4,#2]  ; UIB0
000344  2861              CMP      r0,#0x61
000346  d15d              BNE      |L1.1028|
000348  78e0              LDRB     r0,[r4,#3]  ; UIB0
00034a  2864              CMP      r0,#0x64
00034c  d15a              BNE      |L1.1028|
00034e  2106              MOVS     r1,#6
000350  4620              MOV      r0,r4
000352  f7fffffe          BL       crc_87
000356  79a1              LDRB     r1,[r4,#6]  ; UIB0
000358  4288              CMP      r0,r1
00035a  d153              BNE      |L1.1028|
00035c  2106              MOVS     r1,#6
00035e  4620              MOV      r0,r4
000360  f7fffffe          BL       crc_95
000364  79e1              LDRB     r1,[r4,#7]  ; UIB0
000366  4288              CMP      r0,r1
000368  d14c              BNE      |L1.1028|
;;;606    	{
;;;607    	unsigned short ptr;
;;;608    	unsigned long data1,data2;
;;;609    	char temp_out[20];
;;;610    	ptr=UIB0[4]+(UIB0[5]*256U);
00036a  7920              LDRB     r0,[r4,#4]  ; UIB0
00036c  7961              LDRB     r1,[r4,#5]  ; UIB0
00036e  eb002001          ADD      r0,r0,r1,LSL #8
000372  b280              UXTH     r0,r0
000374  4605              MOV      r5,r0
000376  9008              STR      r0,[sp,#0x20]
;;;611    	data1=lc640_read_long(ptr);
000378  4628              MOV      r0,r5
00037a  f7fffffe          BL       lc640_read_long
00037e  9007              STR      r0,[sp,#0x1c]
;;;612    	data2=lc640_read_long(ptr+4);
000380  1d28              ADDS     r0,r5,#4
000382  f7fffffe          BL       lc640_read_long
000386  9006              STR      r0,[sp,#0x18]
;;;613    	temp_out[0]='r';
000388  f88d6004          STRB     r6,[sp,#4]
;;;614    	temp_out[1]='e';
00038c  f88d7005          STRB     r7,[sp,#5]
;;;615    	temp_out[2]='a';
000390  f04f0061          MOV      r0,#0x61
000394  f88d0006          STRB     r0,[sp,#6]
;;;616    	temp_out[3]='d';
000398  f04f0064          MOV      r0,#0x64
00039c  f88d0007          STRB     r0,[sp,#7]
;;;617    	temp_out[4]=*((char*)&ptr);
0003a0  f89d0020          LDRB     r0,[sp,#0x20]
0003a4  f88d0008          STRB     r0,[sp,#8]
;;;618    	temp_out[5]=*(((char*)&ptr)+1);	
0003a8  f89d0021          LDRB     r0,[sp,#0x21]
0003ac  f88d0009          STRB     r0,[sp,#9]
;;;619    	temp_out[6]=*((char*)&data1);
0003b0  f89d001c          LDRB     r0,[sp,#0x1c]
0003b4  f88d000a          STRB     r0,[sp,#0xa]
;;;620    	temp_out[7]=*(((char*)&data1)+1);		
0003b8  f89d001d          LDRB     r0,[sp,#0x1d]
0003bc  f88d000b          STRB     r0,[sp,#0xb]
;;;621    	temp_out[8]=*(((char*)&data1)+2);	
0003c0  f89d001e          LDRB     r0,[sp,#0x1e]
0003c4  f88d000c          STRB     r0,[sp,#0xc]
;;;622    	temp_out[9]=*(((char*)&data1)+3);		
0003c8  f89d001f          LDRB     r0,[sp,#0x1f]
0003cc  f88d000d          STRB     r0,[sp,#0xd]
;;;623    	temp_out[10]=*((char*)&data2);
0003d0  f89d0018          LDRB     r0,[sp,#0x18]
0003d4  f88d000e          STRB     r0,[sp,#0xe]
;;;624    	temp_out[11]=*(((char*)&data2)+1);		
0003d8  f89d0019          LDRB     r0,[sp,#0x19]
0003dc  f88d000f          STRB     r0,[sp,#0xf]
;;;625    	temp_out[12]=*(((char*)&data2)+2);	
0003e0  f89d001a          LDRB     r0,[sp,#0x1a]
0003e4  f88d0010          STRB     r0,[sp,#0x10]
;;;626    	temp_out[13]=*(((char*)&data2)+3);	
0003e8  f89d001b          LDRB     r0,[sp,#0x1b]
0003ec  f88d0011          STRB     r0,[sp,#0x11]
;;;627    	temp_out[14]=crc_87(temp_out,14);	
0003f0  f04f010e          MOV      r1,#0xe
0003f4  a801              ADD      r0,sp,#4
0003f6  f7fffffe          BL       crc_87
0003fa  f88d0012          STRB     r0,[sp,#0x12]
;;;628    	temp_out[15]=crc_95(temp_out,14);			
0003fe  210e              MOVS     r1,#0xe
000400  a801              ADD      r0,sp,#4
000402  e02b              B        |L1.1116|
                  |L1.1028|
000404  e032              B        |L1.1132|
000406  0000              DCW      0x0000
                  |L1.1032|
                          DCD      Table87
                  |L1.1036|
                          DCD      Table95
                  |L1.1040|
                          DCD      ||.data||
                  |L1.1044|
                          DCD      0x4000c000
                  |L1.1048|
                          DCD      ||.bss||+0x464
                  |L1.1052|
                          DCD      0x4002c000
                  |L1.1056|
                          DCD      0x400fc000
                  |L1.1060|
                          DCD      SystemFrequency
                  |L1.1064|
                          DCD      0x40010000
                  |L1.1068|
                          DCD      ||.bss||+0x64
                  |L1.1072|
                          DCD      plazma_bat_drv1
                  |L1.1076|
                          DCD      plazma_bat_drv0
                  |L1.1080|
                          DCD      modbus_plazma
                  |L1.1084|
                          DCD      sacredSunRequestPhase
                  |L1.1088|
                          DCD      bat_drv_rx_cnt
                  |L1.1092|
                          DCD      modbus_rx_buffer
                  |L1.1096|
                          DCD      modbus_rx_buffer_ptr
                  |L1.1100|
                          DCD      modbus_timeout_cnt
                  |L1.1104|
                          DCD      bat_drv_rx_buff
                  |L1.1108|
                          DCD      sacredSunBatteryInBuff
                  |L1.1112|
                          DCD      sacredSunSilentCnt
                  |L1.1116|
00045c  f7fffffe          BL       crc_95
000460  f88d0013          STRB     r0,[sp,#0x13]
;;;629    	uart_out_adr0(temp_out,16);
000464  2110              MOVS     r1,#0x10
000466  a801              ADD      r0,sp,#4
000468  f7fffffe          BL       uart_out_adr0
                  |L1.1132|
;;;630    	}
;;;631    
;;;632    
;;;633    if((UIB0[0]=='w')&&(UIB0[1]=='r')&&(UIB0[2]=='i')&&(UIB0[3]=='t')&&(UIB0[4]=='e')&&(UIB0[15]==crc_87(UIB0,15))&&(UIB0[16]==crc_95(UIB0,15)))
00046c  7820              LDRB     r0,[r4,#0]  ; UIB0
00046e  2877              CMP      r0,#0x77
000470  d169              BNE      |L1.1350|
000472  7860              LDRB     r0,[r4,#1]  ; UIB0
000474  2872              CMP      r0,#0x72
000476  d166              BNE      |L1.1350|
000478  78a0              LDRB     r0,[r4,#2]  ; UIB0
00047a  2869              CMP      r0,#0x69
00047c  d163              BNE      |L1.1350|
00047e  78e0              LDRB     r0,[r4,#3]  ; UIB0
000480  2874              CMP      r0,#0x74
000482  d160              BNE      |L1.1350|
000484  7920              LDRB     r0,[r4,#4]  ; UIB0
000486  2865              CMP      r0,#0x65
000488  d15d              BNE      |L1.1350|
00048a  210f              MOVS     r1,#0xf
00048c  4878              LDR      r0,|L1.1648|
00048e  f7fffffe          BL       crc_87
000492  7be1              LDRB     r1,[r4,#0xf]  ; UIB0
000494  4288              CMP      r0,r1
000496  d156              BNE      |L1.1350|
000498  210f              MOVS     r1,#0xf
00049a  4875              LDR      r0,|L1.1648|
00049c  f7fffffe          BL       crc_95
0004a0  7c21              LDRB     r1,[r4,#0x10]  ; UIB0
0004a2  4288              CMP      r0,r1
0004a4  d14f              BNE      |L1.1350|
;;;634    	{
;;;635    	unsigned short ptr;
;;;636    	unsigned long data1,data2;
;;;637    	char temp_out[20];
;;;638    	ptr=UIB0[5]+(UIB0[6]*256U);
0004a6  7960              LDRB     r0,[r4,#5]  ; UIB0
0004a8  79a1              LDRB     r1,[r4,#6]  ; UIB0
0004aa  eb002001          ADD      r0,r0,r1,LSL #8
0004ae  b280              UXTH     r0,r0
0004b0  4605              MOV      r5,r0
0004b2  9008              STR      r0,[sp,#0x20]
;;;639    	*((char*)&data1)=UIB0[7];
0004b4  79e0              LDRB     r0,[r4,#7]  ; UIB0
0004b6  f88d001c          STRB     r0,[sp,#0x1c]
;;;640    	*(((char*)&data1)+1)=UIB0[8];
0004ba  7a20              LDRB     r0,[r4,#8]  ; UIB0
0004bc  f88d001d          STRB     r0,[sp,#0x1d]
;;;641    	*(((char*)&data1)+2)=UIB0[9];
0004c0  7a60              LDRB     r0,[r4,#9]  ; UIB0
0004c2  f88d001e          STRB     r0,[sp,#0x1e]
;;;642    	*(((char*)&data1)+3)=UIB0[10];
0004c6  7aa0              LDRB     r0,[r4,#0xa]  ; UIB0
0004c8  f88d001f          STRB     r0,[sp,#0x1f]
;;;643    	*((char*)&data2)=UIB0[11];
0004cc  7ae0              LDRB     r0,[r4,#0xb]  ; UIB0
0004ce  f88d0018          STRB     r0,[sp,#0x18]
;;;644    	*(((char*)&data2)+1)=UIB0[12];
0004d2  7b20              LDRB     r0,[r4,#0xc]  ; UIB0
0004d4  f88d0019          STRB     r0,[sp,#0x19]
;;;645    	*(((char*)&data2)+2)=UIB0[13];
0004d8  7b60              LDRB     r0,[r4,#0xd]  ; UIB0
0004da  f88d001a          STRB     r0,[sp,#0x1a]
;;;646    	*(((char*)&data2)+3)=UIB0[14];	
0004de  7ba0              LDRB     r0,[r4,#0xe]  ; UIB0
0004e0  f88d001b          STRB     r0,[sp,#0x1b]
;;;647    	lc640_write_long(ptr,data1);
0004e4  4628              MOV      r0,r5
0004e6  9907              LDR      r1,[sp,#0x1c]
0004e8  f7fffffe          BL       lc640_write_long
;;;648    	lc640_write_long(ptr+4,data2);
0004ec  1d28              ADDS     r0,r5,#4
0004ee  9906              LDR      r1,[sp,#0x18]
0004f0  f7fffffe          BL       lc640_write_long
;;;649    	
;;;650    	//data1=lc640_read_long(ptr);
;;;651    	//data2=lc640_read_long(ptr+4);
;;;652    	temp_out[0]='w';
0004f4  f04f0077          MOV      r0,#0x77
0004f8  f88d0004          STRB     r0,[sp,#4]
;;;653    	temp_out[1]='r';
0004fc  f88d6005          STRB     r6,[sp,#5]
;;;654    	temp_out[2]='i';
000500  f04f0069          MOV      r0,#0x69
000504  f88d0006          STRB     r0,[sp,#6]
;;;655    	temp_out[3]='t';
000508  f04f0074          MOV      r0,#0x74
00050c  f88d0007          STRB     r0,[sp,#7]
;;;656    	temp_out[4]='e';
000510  f88d7008          STRB     r7,[sp,#8]
;;;657    	temp_out[5]=*((char*)&ptr);
000514  f89d0020          LDRB     r0,[sp,#0x20]
000518  f88d0009          STRB     r0,[sp,#9]
;;;658    	temp_out[6]=*(((char*)&ptr)+1);	
00051c  f89d0021          LDRB     r0,[sp,#0x21]
000520  f88d000a          STRB     r0,[sp,#0xa]
;;;659    	/*temp_out[6]=*((char*)&data1);
;;;660    	temp_out[7]=*(((char*)&data1)+1);		
;;;661    	temp_out[8]=*(((char*)&data1)+2);	
;;;662    	temp_out[9]=*(((char*)&data1)+3);		
;;;663    	temp_out[10]=*((char*)&data2);
;;;664    	temp_out[11]=*(((char*)&data2)+1);		
;;;665    	temp_out[12]=*(((char*)&data2)+2);	
;;;666    	temp_out[13]=*(((char*)&data2)+3);	*/
;;;667    	temp_out[7]=crc_87(temp_out,7);	
000524  f04f0107          MOV      r1,#7
000528  a801              ADD      r0,sp,#4
00052a  f7fffffe          BL       crc_87
00052e  f88d000b          STRB     r0,[sp,#0xb]
;;;668    	temp_out[8]=crc_95(temp_out,7);			
000532  2107              MOVS     r1,#7
000534  a801              ADD      r0,sp,#4
000536  f7fffffe          BL       crc_95
00053a  f88d000c          STRB     r0,[sp,#0xc]
;;;669    	uart_out_adr0(temp_out,9);
00053e  2109              MOVS     r1,#9
000540  a801              ADD      r0,sp,#4
000542  f7fffffe          BL       uart_out_adr0
                  |L1.1350|
;;;670    	}
;;;671    
;;;672    }
000546  b009              ADD      sp,sp,#0x24
000548  bdf0              POP      {r4-r7,pc}
;;;673    
                          ENDP

                  index_offset0 PROC
;;;676    //-----------------------------------------------
;;;677    signed short index_offset0 (signed short index,signed short offset)
00054a  4408              ADD      r0,r0,r1
;;;678    {
;;;679    index=index+offset;
00054c  b200              SXTH     r0,r0
;;;680    if(index>=RX_BUFFER_SIZE0) index-=RX_BUFFER_SIZE0; 
00054e  f5b06f80          CMP      r0,#0x400
000552  db02              BLT      |L1.1370|
000554  f5a06080          SUB      r0,r0,#0x400
000558  b200              SXTH     r0,r0
                  |L1.1370|
;;;681    if(index<0) index+=RX_BUFFER_SIZE0;
00055a  2800              CMP      r0,#0
00055c  da02              BGE      |L1.1380|
00055e  f5006080          ADD      r0,r0,#0x400
000562  b200              SXTH     r0,r0
                  |L1.1380|
;;;682    return index;
;;;683    }
000564  4770              BX       lr
;;;684    
                          ENDP

                  control_check0 PROC
;;;685    //-----------------------------------------------
;;;686    char control_check0(signed short index)
000566  b570              PUSH     {r4-r6,lr}
;;;687    {
000568  4606              MOV      r6,r0
;;;688    char i=0,ii=0,iii;
00056a  f04f0200          MOV      r2,#0
;;;689    
;;;690    if(rx_buffer0[index]!=END) goto error_cc;
00056e  4d40              LDR      r5,|L1.1648|
000570  f1050564          ADD      r5,r5,#0x64
000574  5da8              LDRB     r0,[r5,r6]
000576  280a              CMP      r0,#0xa
000578  d11e              BNE      |L1.1464|
;;;691    
;;;692    ii=rx_buffer0[index_offset0(index,-2)];
00057a  1e91              SUBS     r1,r2,#2
00057c  4630              MOV      r0,r6
00057e  f7fffffe          BL       index_offset0
000582  5c2c              LDRB     r4,[r5,r0]
;;;693    iii=0;
000584  f04f0300          MOV      r3,#0
;;;694    for(i=0;i<=ii;i++)
000588  e00a              B        |L1.1440|
                  |L1.1418|
;;;695    	{
;;;696    	iii^=rx_buffer0[index_offset0(index,-2-ii+i)];
00058a  1b11              SUBS     r1,r2,r4
00058c  1e89              SUBS     r1,r1,#2
00058e  4630              MOV      r0,r6
000590  f7fffffe          BL       index_offset0
000594  5c28              LDRB     r0,[r5,r0]
000596  ea800303          EOR      r3,r0,r3
00059a  f1020201          ADD      r2,r2,#1              ;694
00059e  b2d2              UXTB     r2,r2                 ;694
                  |L1.1440|
0005a0  42a2              CMP      r2,r4                 ;694
0005a2  d9f2              BLS      |L1.1418|
;;;697    	}
;;;698    if (iii!=rx_buffer0[index_offset0(index,-1)]) goto error_cc;	
0005a4  f04f31ff          MOV      r1,#0xffffffff
0005a8  4630              MOV      r0,r6
0005aa  f7fffffe          BL       index_offset0
0005ae  5c28              LDRB     r0,[r5,r0]
0005b0  4298              CMP      r0,r3
0005b2  d101              BNE      |L1.1464|
;;;699    
;;;700    
;;;701    //success_cc:
;;;702    return 1;
0005b4  2001              MOVS     r0,#1
;;;703    error_cc:
;;;704    return 0;
;;;705    
;;;706    }
0005b6  bd70              POP      {r4-r6,pc}
                  |L1.1464|
0005b8  2000              MOVS     r0,#0                 ;704
0005ba  bd70              POP      {r4-r6,pc}
;;;707    
                          ENDP

                  uart_in0 PROC
;;;708    //-----------------------------------------------
;;;709    void uart_in0(void)
0005bc  e92d41f0          PUSH     {r4-r8,lr}
;;;710    {
;;;711    char temp,i/*,count*/;
;;;712    
;;;713    //__disable_irq();
;;;714    
;;;715    if(rx_buffer_overflow0)
0005c0  4d2c              LDR      r5,|L1.1652|
0005c2  2600              MOVS     r6,#0
0005c4  78a8              LDRB     r0,[r5,#2]  ; rx_buffer_overflow0
0005c6  b118              CBZ      r0,|L1.1488|
;;;716    	{
;;;717    	rx_wr_index0=0;
0005c8  80ae              STRH     r6,[r5,#4]
;;;718    	rx_rd_index0=0;
0005ca  80ee              STRH     r6,[r5,#6]
;;;719    	rx_counter0=0;
0005cc  812e              STRH     r6,[r5,#8]
;;;720    	rx_buffer_overflow0=0;
0005ce  70ae              STRB     r6,[r5,#2]
                  |L1.1488|
;;;721    	}    
;;;722    	
;;;723    if(rx_counter0&&(rx_buffer0[index_offset0(rx_wr_index0,-1)])==END)
0005d0  8928              LDRH     r0,[r5,#8]  ; rx_counter0
0005d2  2800              CMP      r0,#0
0005d4  d03a              BEQ      |L1.1612|
0005d6  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
0005d8  f04f32ff          MOV      r2,#0xffffffff
0005dc  4611              MOV      r1,r2
0005de  b200              SXTH     r0,r0
0005e0  f7fffffe          BL       index_offset0
0005e4  4f22              LDR      r7,|L1.1648|
0005e6  3764              ADDS     r7,r7,#0x64
0005e8  5c38              LDRB     r0,[r7,r0]
0005ea  280a              CMP      r0,#0xa
0005ec  d12e              BNE      |L1.1612|
;;;724    	{
;;;725    	
;;;726         temp=rx_buffer0[index_offset0(rx_wr_index0,-3)];
0005ee  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
0005f0  f06f0102          MVN      r1,#2
0005f4  b200              SXTH     r0,r0
0005f6  f7fffffe          BL       index_offset0
0005fa  5c3c              LDRB     r4,[r7,r0]
;;;727        	if(temp<100) 
0005fc  2c64              CMP      r4,#0x64
0005fe  d225              BCS      |L1.1612|
;;;728        		{
;;;729        		if(control_check0(index_offset0(rx_wr_index0,-1)))
000600  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
000602  4611              MOV      r1,r2
000604  b200              SXTH     r0,r0
000606  f7fffffe          BL       index_offset0
00060a  f7fffffe          BL       control_check0
00060e  2800              CMP      r0,#0
000610  d01c              BEQ      |L1.1612|
;;;730        			{
;;;731        		
;;;732        			rx_rd_index0=index_offset0(rx_wr_index0,-3-temp);
000612  1ce0              ADDS     r0,r4,#3
000614  4241              RSBS     r1,r0,#0
000616  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
000618  b200              SXTH     r0,r0
00061a  f7fffffe          BL       index_offset0
00061e  80e8              STRH     r0,[r5,#6]
;;;733        			for(i=0;i<temp;i++)
000620  f04f0200          MOV      r2,#0
;;;734    				{
;;;735    				UIB0[i]=rx_buffer0[index_offset0(rx_rd_index0,i)];
000624  4b12              LDR      r3,|L1.1648|
000626  e009              B        |L1.1596|
                  |L1.1576|
000628  88e8              LDRH     r0,[r5,#6]  ; rx_rd_index0
00062a  4611              MOV      r1,r2
00062c  b200              SXTH     r0,r0
00062e  f7fffffe          BL       index_offset0
000632  5c38              LDRB     r0,[r7,r0]
000634  5498              STRB     r0,[r3,r2]
000636  f1020201          ADD      r2,r2,#1              ;733
00063a  b2d2              UXTB     r2,r2                 ;733
                  |L1.1596|
00063c  42a2              CMP      r2,r4                 ;733
00063e  d3f3              BCC      |L1.1576|
;;;736    				} 
;;;737    			rx_rd_index0=rx_wr_index0;
000640  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
000642  80e8              STRH     r0,[r5,#6]
;;;738    			rx_counter0=0;
000644  812e              STRH     r6,[r5,#8]
;;;739    			
;;;740    			uart_in_an0();
000646  e8bd41f0          POP      {r4-r8,lr}
00064a  e7fe              B        uart_in_an0
                  |L1.1612|
;;;741        			}
;;;742     	
;;;743        		} 
;;;744        	}	
;;;745    
;;;746    
;;;747    //__enable_irq();     
;;;748    }   	
00064c  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

                  NVIC_EnableIRQ PROC
;;;1095    */
;;;1096   static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000650  f000021f          AND      r2,r0,#0x1f
;;;1097   {
;;;1098     NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000654  f04f0101          MOV      r1,#1
000658  fa01f102          LSL      r1,r1,r2
00065c  ea4f1050          LSR      r0,r0,#5
000660  f04f22e0          MOV      r2,#0xe000e000
000664  eb020080          ADD      r0,r2,r0,LSL #2
000668  f8c01100          STR      r1,[r0,#0x100]
;;;1099   }
00066c  4770              BX       lr
;;;1100   
                          ENDP

00066e  0000              DCW      0x0000
                  |L1.1648|
                          DCD      ||.bss||
                  |L1.1652|
                          DCD      ||.data||

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  uart_out0 PROC
;;;75     //-----------------------------------------------
;;;76     char crc_87(char* ptr,char num)
000000  b5ff              PUSH     {r0-r7,lr}
;;;77     {
;;;78     char r,j;
;;;79     r=*ptr;
000002  ad09              ADD      r5,sp,#0x24
;;;80     
;;;81     for(j=1;j<num;j++)
000004  cde0              LDM      r5,{r5-r7}
000006  f04f0400          MOV      r4,#0
00000a  f88d1000          STRB     r1,[sp,#0]
;;;82     	{
;;;83          ptr++;
00000e  f88d2001          STRB     r2,[sp,#1]
;;;84     	r=((*ptr)^Table87[r]);
000012  f88d3002          STRB     r3,[sp,#2]
000016  f88d5003          STRB     r5,[sp,#3]
00001a  f88d6004          STRB     r6,[sp,#4]            ;81
00001e  f88d7005          STRB     r7,[sp,#5]            ;81
;;;85     	}
;;;86     
;;;87     return r;	
000022  4621              MOV      r1,r4
;;;88     } 
000024  466d              MOV      r5,sp
000026  e005              B        |L2.52|
                  |L2.40|
000028  5c6a              LDRB     r2,[r5,r1]
00002a  ea820404          EOR      r4,r2,r4
00002e  f1010101          ADD      r1,r1,#1
000032  b2c9              UXTB     r1,r1
                  |L2.52|
000034  4281              CMP      r1,r0
000036  d3f7              BCC      |L2.40|
000038  5428              STRB     r0,[r5,r0]
00003a  ea800204          EOR      r2,r0,r4
00003e  eb050100          ADD      r1,r5,r0
000042  704a              STRB     r2,[r1,#1]
000044  f04f020a          MOV      r2,#0xa
000048  708a              STRB     r2,[r1,#2]
00004a  f04f0400          MOV      r4,#0
00004e  f1000603          ADD      r6,r0,#3
000052  e005              B        |L2.96|
                  |L2.84|
000054  5d28              LDRB     r0,[r5,r4]
000056  f7fffffe          BL       putchar0
00005a  f1040401          ADD      r4,r4,#1
00005e  b2e4              UXTB     r4,r4
                  |L2.96|
000060  42b4              CMP      r4,r6
000062  d3f7              BCC      |L2.84|
000064  bdff              POP      {r0-r7,pc}
;;;89     
                          ENDP


                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                  uart_out_buff0 PROC
;;;75     //-----------------------------------------------
;;;76     char crc_87(char* ptr,char num)
000000  b570              PUSH     {r4-r6,lr}
;;;77     {
;;;78     char r,j;
;;;79     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;80     
;;;81     for(j=1;j<num;j++)
000004  460d              MOV      r5,r1
000006  f04f0200          MOV      r2,#0
00000a  466e              MOV      r6,sp
;;;82     	{
;;;83          ptr++;
00000c  e004              B        |L3.24|
                  |L3.14|
00000e  5c81              LDRB     r1,[r0,r2]
;;;84     	r=((*ptr)^Table87[r]);
000010  54b1              STRB     r1,[r6,r2]
000012  f1020201          ADD      r2,r2,#1
000016  b2d2              UXTB     r2,r2
                  |L3.24|
000018  42aa              CMP      r2,r5                 ;81
00001a  d3f8              BCC      |L3.14|
00001c  f04f0400          MOV      r4,#0                 ;81
000020  e005              B        |L3.46|
                  |L3.34|
;;;85     	}
;;;86     
;;;87     return r;	
000022  5d30              LDRB     r0,[r6,r4]
;;;88     } 
000024  f7fffffe          BL       putchar0
000028  f1040401          ADD      r4,r4,#1
00002c  b2e4              UXTB     r4,r4
                  |L3.46|
00002e  42ac              CMP      r4,r5
000030  d3f7              BCC      |L3.34|
000032  b00f              ADD      sp,sp,#0x3c
000034  bd70              POP      {r4-r6,pc}
;;;89     
                          ENDP


                          AREA ||area_number.4||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.text||
                  uart_out_adr_block PROC
;;;75     //-----------------------------------------------
;;;76     char crc_87(char* ptr,char num)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;77     {
;;;78     char r,j;
;;;79     r=*ptr;
000002  b09a              SUB      sp,sp,#0x68
;;;80     
;;;81     for(j=1;j<num;j++)
000004  460f              MOV      r7,r1
000006  4616              MOV      r6,r2
;;;82     	{
;;;83          ptr++;
;;;84     	r=((*ptr)^Table87[r]);
000008  f04f0164          MOV      r1,#0x64
00000c  a801              ADD      r0,sp,#4              ;83
00000e  f7fffffe          BL       __aeabi_memclr4
000012  f04f0016          MOV      r0,#0x16
000016  f7fffffe          BL       putchar0
00001a  f04f000a          MOV      r0,#0xa               ;81
00001e  f7fffffe          BL       putchar0
;;;85     	}
;;;86     
;;;87     return r;	
000022  f89d0068          LDRB     r0,[sp,#0x68]
;;;88     } 
000026  f080051c          EOR      r5,r0,#0x1c
00002a  f7fffffe          BL       putchar0
00002e  f89d0069          LDRB     r0,[sp,#0x69]
000032  ea850500          EOR      r5,r5,r0
000036  f7fffffe          BL       putchar0
00003a  f89d006a          LDRB     r0,[sp,#0x6a]
00003e  ea850500          EOR      r5,r5,r0
000042  f7fffffe          BL       putchar0
000046  f89d006b          LDRB     r0,[sp,#0x6b]
00004a  ea850500          EOR      r5,r5,r0
00004e  f7fffffe          BL       putchar0
000052  f04f0400          MOV      r4,#0
000056  e006              B        |L4.102|
                  |L4.88|
000058  5d38              LDRB     r0,[r7,r4]
00005a  ea850500          EOR      r5,r5,r0
00005e  f7fffffe          BL       putchar0
000062  f1040401          ADD      r4,r4,#1
                  |L4.102|
000066  42b4              CMP      r4,r6
000068  d3f6              BCC      |L4.88|
00006a  f1060606          ADD      r6,r6,#6
00006e  b2f0              UXTB     r0,r6
000070  ea850500          EOR      r5,r5,r0
000074  f7fffffe          BL       putchar0
000078  4628              MOV      r0,r5
00007a  f7fffffe          BL       putchar0
00007e  b01d              ADD      sp,sp,#0x74
000080  200a              MOVS     r0,#0xa
000082  e8bd40f0          POP      {r4-r7,lr}
000086  f7ffbffe          B.W      putchar0
;;;89     
                          ENDP


                          AREA ||area_number.5||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.text||
                  rs232_data_out_1 PROC
;;;75     //-----------------------------------------------
;;;76     char crc_87(char* ptr,char num)
000000  b500              PUSH     {lr}
;;;77     {
;;;78     char r,j;
;;;79     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;80     
;;;81     for(j=1;j<num;j++)
000004  481d              LDR      r0,|L5.124|
000006  6800              LDR      r0,[r0,#0]  ; avar_stat
;;;82     	{
;;;83          ptr++;
;;;84     	r=((*ptr)^Table87[r]);
000008  f8ad0000          STRH     r0,[sp,#0]
00000c  481c              LDR      r0,|L5.128|
00000e  7800              LDRB     r0,[r0,#0]            ;83  ; spc_stat
000010  f8ad0002          STRH     r0,[sp,#2]
000014  481b              LDR      r0,|L5.132|
000016  8800              LDRH     r0,[r0,#0]  ; load_U
000018  f8ad0004          STRH     r0,[sp,#4]            ;81
00001c  481a              LDR      r0,|L5.136|
00001e  8800              LDRH     r0,[r0,#0]            ;81  ; load_I
000020  f8ad0006          STRH     r0,[sp,#6]            ;81
;;;85     	}
;;;86     
;;;87     return r;	
;;;88     } 
000024  4819              LDR      r0,|L5.140|
000026  8800              LDRH     r0,[r0,#0]  ; net_U
000028  f8ad0008          STRH     r0,[sp,#8]
00002c  4818              LDR      r0,|L5.144|
00002e  8800              LDRH     r0,[r0,#0]  ; net_F
000030  f8ad000a          STRH     r0,[sp,#0xa]
000034  4817              LDR      r0,|L5.148|
000036  8800              LDRH     r0,[r0,#0]  ; t_ext
000038  f8ad000c          STRH     r0,[sp,#0xc]
00003c  4816              LDR      r0,|L5.152|
00003e  69c1              LDR      r1,[r0,#0x1c]  ; bps
000040  f8ad100e          STRH     r1,[sp,#0xe]
000044  6a41              LDR      r1,[r0,#0x24]  ; bps
000046  f8ad1010          STRH     r1,[sp,#0x10]
00004a  6a81              LDR      r1,[r0,#0x28]  ; bps
00004c  f8ad1012          STRH     r1,[sp,#0x12]
000050  7841              LDRB     r1,[r0,#1]  ; bps
000052  f8ad1014          STRH     r1,[sp,#0x14]
000056  6f01              LDR      r1,[r0,#0x70]  ; bps
000058  f8ad1016          STRH     r1,[sp,#0x16]
00005c  6f81              LDR      r1,[r0,#0x78]  ; bps
00005e  f8ad1018          STRH     r1,[sp,#0x18]
000062  6fc1              LDR      r1,[r0,#0x7c]  ; bps
000064  f8ad101a          STRH     r1,[sp,#0x1a]
000068  f8900055          LDRB     r0,[r0,#0x55]  ; bps
00006c  f8ad001c          STRH     r0,[sp,#0x1c]
000070  211e              MOVS     r1,#0x1e
000072  4668              MOV      r0,sp
000074  f7fffffe          BL       uart_out_adr0
000078  b00f              ADD      sp,sp,#0x3c
00007a  bd00              POP      {pc}
;;;89     
                          ENDP

                  |L5.124|
                          DCD      avar_stat
                  |L5.128|
                          DCD      spc_stat
                  |L5.132|
                          DCD      load_U
                  |L5.136|
                          DCD      load_I
                  |L5.140|
                          DCD      net_U
                  |L5.144|
                          DCD      net_F
                  |L5.148|
                          DCD      t_ext
                  |L5.152|
                          DCD      bps

                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  rs232_data_out PROC
;;;75     //-----------------------------------------------
;;;76     char crc_87(char* ptr,char num)
000000  b500              PUSH     {lr}
;;;77     {
;;;78     char r,j;
;;;79     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;80     
;;;81     for(j=1;j<num;j++)
000004  4821              LDR      r0,|L6.140|
000006  6800              LDR      r0,[r0,#0]  ; avar_stat
;;;82     	{
;;;83          ptr++;
;;;84     	r=((*ptr)^Table87[r]);
000008  f8ad0000          STRH     r0,[sp,#0]
00000c  4820              LDR      r0,|L6.144|
00000e  7800              LDRB     r0,[r0,#0]            ;83  ; spc_stat
000010  f8ad0002          STRH     r0,[sp,#2]
000014  481f              LDR      r0,|L6.148|
000016  8800              LDRH     r0,[r0,#0]  ; load_U
000018  f8ad0004          STRH     r0,[sp,#4]            ;81
00001c  481e              LDR      r0,|L6.152|
00001e  8800              LDRH     r0,[r0,#0]            ;81  ; load_I
000020  f8ad0006          STRH     r0,[sp,#6]            ;81
;;;85     	}
;;;86     
;;;87     return r;	
;;;88     } 
000024  481d              LDR      r0,|L6.156|
000026  8800              LDRH     r0,[r0,#0]  ; net_Ua
000028  f8ad0008          STRH     r0,[sp,#8]
00002c  481c              LDR      r0,|L6.160|
00002e  8800              LDRH     r0,[r0,#0]  ; net_Ub
000030  f8ad000a          STRH     r0,[sp,#0xa]
000034  481b              LDR      r0,|L6.164|
000036  8800              LDRH     r0,[r0,#0]  ; net_Uc
000038  f8ad000c          STRH     r0,[sp,#0xc]
00003c  481a              LDR      r0,|L6.168|
00003e  8800              LDRH     r0,[r0,#0]  ; net_F3
000040  f8ad000e          STRH     r0,[sp,#0xe]
000044  4819              LDR      r0,|L6.172|
000046  8800              LDRH     r0,[r0,#0]  ; t_ext
000048  f8ad0010          STRH     r0,[sp,#0x10]
00004c  4818              LDR      r0,|L6.176|
00004e  69c1              LDR      r1,[r0,#0x1c]  ; bps
000050  f8ad1012          STRH     r1,[sp,#0x12]
000054  6a41              LDR      r1,[r0,#0x24]  ; bps
000056  f8ad1014          STRH     r1,[sp,#0x14]
00005a  6a81              LDR      r1,[r0,#0x28]  ; bps
00005c  f8ad1016          STRH     r1,[sp,#0x16]
000060  7841              LDRB     r1,[r0,#1]  ; bps
000062  f8ad1018          STRH     r1,[sp,#0x18]
000066  6f01              LDR      r1,[r0,#0x70]  ; bps
000068  f8ad101a          STRH     r1,[sp,#0x1a]
00006c  6f81              LDR      r1,[r0,#0x78]  ; bps
00006e  f8ad101c          STRH     r1,[sp,#0x1c]
000072  6fc1              LDR      r1,[r0,#0x7c]  ; bps
000074  f8ad101e          STRH     r1,[sp,#0x1e]
000078  f8900055          LDRB     r0,[r0,#0x55]  ; bps
00007c  f8ad0020          STRH     r0,[sp,#0x20]
000080  2122              MOVS     r1,#0x22
000082  4668              MOV      r0,sp
000084  f7fffffe          BL       uart_out_adr0
000088  b00f              ADD      sp,sp,#0x3c
00008a  bd00              POP      {pc}
;;;89     
                          ENDP

                  |L6.140|
                          DCD      avar_stat
                  |L6.144|
                          DCD      spc_stat
                  |L6.148|
                          DCD      load_U
                  |L6.152|
                          DCD      load_I
                  |L6.156|
                          DCD      net_Ua
                  |L6.160|
                          DCD      net_Ub
                  |L6.164|
                          DCD      net_Uc
                  |L6.168|
                          DCD      net_F3
                  |L6.172|
                          DCD      t_ext
                  |L6.176|
                          DCD      bps

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  rs232_data_out_tki PROC
;;;75     //-----------------------------------------------
;;;76     char crc_87(char* ptr,char num)
000000  b500              PUSH     {lr}
;;;77     {
;;;78     char r,j;
;;;79     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;80     
;;;81     for(j=1;j<num;j++)
000004  4833              LDR      r0,|L7.212|
000006  6800              LDR      r0,[r0,#0]  ; avar_stat
;;;82     	{
;;;83          ptr++;
;;;84     	r=((*ptr)^Table87[r]);
000008  f8ad0000          STRH     r0,[sp,#0]
00000c  4832              LDR      r0,|L7.216|
00000e  7800              LDRB     r0,[r0,#0]            ;83  ; spc_stat
000010  f8ad0002          STRH     r0,[sp,#2]
000014  4831              LDR      r0,|L7.220|
000016  8800              LDRH     r0,[r0,#0]  ; load_U
000018  f8ad0004          STRH     r0,[sp,#4]            ;81
00001c  4830              LDR      r0,|L7.224|
00001e  8800              LDRH     r0,[r0,#0]            ;81  ; load_I
000020  f8ad0006          STRH     r0,[sp,#6]            ;81
;;;85     	}
;;;86     
;;;87     return r;	
;;;88     } 
000024  482f              LDR      r0,|L7.228|
000026  8800              LDRH     r0,[r0,#0]  ; net_Ua
000028  f8ad0008          STRH     r0,[sp,#8]
00002c  482e              LDR      r0,|L7.232|
00002e  8800              LDRH     r0,[r0,#0]  ; net_Ub
000030  f8ad000a          STRH     r0,[sp,#0xa]
000034  482d              LDR      r0,|L7.236|
000036  8800              LDRH     r0,[r0,#0]  ; net_Uc
000038  f8ad000c          STRH     r0,[sp,#0xc]
00003c  482c              LDR      r0,|L7.240|
00003e  8800              LDRH     r0,[r0,#0]  ; net_F3
000040  f8ad000e          STRH     r0,[sp,#0xe]
000044  482b              LDR      r0,|L7.244|
000046  8800              LDRH     r0,[r0,#0]  ; t_ext
000048  f8ad0010          STRH     r0,[sp,#0x10]
00004c  482a              LDR      r0,|L7.248|
00004e  69c1              LDR      r1,[r0,#0x1c]  ; bps
000050  f8ad1012          STRH     r1,[sp,#0x12]
000054  6a41              LDR      r1,[r0,#0x24]  ; bps
000056  f8ad1014          STRH     r1,[sp,#0x14]
00005a  6a81              LDR      r1,[r0,#0x28]  ; bps
00005c  f8ad1016          STRH     r1,[sp,#0x16]
000060  7841              LDRB     r1,[r0,#1]  ; bps
000062  f8ad1018          STRH     r1,[sp,#0x18]
000066  6f01              LDR      r1,[r0,#0x70]  ; bps
000068  f8ad101a          STRH     r1,[sp,#0x1a]
00006c  6f81              LDR      r1,[r0,#0x78]  ; bps
00006e  f8ad101c          STRH     r1,[sp,#0x1c]
000072  6fc1              LDR      r1,[r0,#0x7c]  ; bps
000074  f8ad101e          STRH     r1,[sp,#0x1e]
000078  f8901055          LDRB     r1,[r0,#0x55]  ; bps
00007c  f8ad1020          STRH     r1,[sp,#0x20]
000080  f8d010c4          LDR      r1,[r0,#0xc4]  ; bps
000084  f8ad1022          STRH     r1,[sp,#0x22]
000088  f8d010cc          LDR      r1,[r0,#0xcc]  ; bps
00008c  f8ad1024          STRH     r1,[sp,#0x24]
000090  f8d010d0          LDR      r1,[r0,#0xd0]  ; bps
000094  f8ad1026          STRH     r1,[sp,#0x26]
000098  f89010a9          LDRB     r1,[r0,#0xa9]  ; bps
00009c  f8ad1028          STRH     r1,[sp,#0x28]
0000a0  f8d01118          LDR      r1,[r0,#0x118]  ; bps
0000a4  f8ad102a          STRH     r1,[sp,#0x2a]
0000a8  f8d01120          LDR      r1,[r0,#0x120]  ; bps
0000ac  f8ad102c          STRH     r1,[sp,#0x2c]
0000b0  f8d01124          LDR      r1,[r0,#0x124]  ; bps
0000b4  f8ad102e          STRH     r1,[sp,#0x2e]
0000b8  f89000fd          LDRB     r0,[r0,#0xfd]  ; bps
0000bc  f8ad0030          STRH     r0,[sp,#0x30]
0000c0  480e              LDR      r0,|L7.252|
0000c2  8800              LDRH     r0,[r0,#0]  ; Ib_ips_termokompensat
0000c4  f8ad0032          STRH     r0,[sp,#0x32]
0000c8  2134              MOVS     r1,#0x34
0000ca  4668              MOV      r0,sp
0000cc  f7fffffe          BL       uart_out_adr0
0000d0  b00f              ADD      sp,sp,#0x3c
0000d2  bd00              POP      {pc}
;;;89     
                          ENDP

                  |L7.212|
                          DCD      avar_stat
                  |L7.216|
                          DCD      spc_stat
                  |L7.220|
                          DCD      load_U
                  |L7.224|
                          DCD      load_I
                  |L7.228|
                          DCD      net_Ua
                  |L7.232|
                          DCD      net_Ub
                  |L7.236|
                          DCD      net_Uc
                  |L7.240|
                          DCD      net_F3
                  |L7.244|
                          DCD      t_ext
                  |L7.248|
                          DCD      bps
                  |L7.252|
                          DCD      Ib_ips_termokompensat

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  getchar0 PROC
;;;75     //-----------------------------------------------
;;;76     char crc_87(char* ptr,char num)
000000  4b09              LDR      r3,|L8.40|
;;;77     {
;;;78     char r,j;
;;;79     r=*ptr;
000002  8919              LDRH     r1,[r3,#8]
                  |L8.4|
;;;80     
;;;81     for(j=1;j<num;j++)
000004  2900              CMP      r1,#0
000006  d0fd              BEQ      |L8.4|
;;;82     	{
;;;83          ptr++;
;;;84     	r=((*ptr)^Table87[r]);
000008  4808              LDR      r0,|L8.44|
00000a  88da              LDRH     r2,[r3,#6]            ;81  ; rx_rd_index0
00000c  5c80              LDRB     r0,[r0,r2]            ;83
00000e  1c52              ADDS     r2,r2,#1              ;83
000010  b292              UXTH     r2,r2
000012  80da              STRH     r2,[r3,#6]
000014  f5b26f80          CMP      r2,#0x400
000018  d102              BNE      |L8.32|
00001a  f04f0200          MOV      r2,#0                 ;81
00001e  80da              STRH     r2,[r3,#6]            ;81
                  |L8.32|
000020  f1a10101          SUB      r1,r1,#1              ;81
;;;85     	}
;;;86     
;;;87     return r;	
;;;88     } 
000024  8119              STRH     r1,[r3,#8]
000026  4770              BX       lr
;;;89     
                          ENDP

                  |L8.40|
                          DCD      ||.data||
                  |L8.44|
                          DCD      ||.bss||+0x64

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UIB0
                          %        100
                  rx_buffer0
                          %        1024
                  tx_buffer0
                          %        1024

                          AREA ||area_number.11||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.11||, ||.bss||
                  memo_out
                          %        50

                          AREA ||area_number.12||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.12||, ||.bss||
                  data_rs
                          %        50

                          AREA ||area_number.13||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.13||, ||.bss||
                  data_rs0
                          %        50

                          AREA ||area_number.14||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.14||, ||.bss||
                  rs232_data_out_buff
                          %        60

                          AREA ||.data||, DATA, ALIGN=2

                  UART0TxEmpty
000000  01                DCB      0x01
                  bRXIN0
000001  00                DCB      0x00
                  rx_buffer_overflow0
000002  00                DCB      0x00
                  plazma_uart0
000003  00                DCB      0x00
                  rx_wr_index0
000004  0000              DCB      0x00,0x00
                  rx_rd_index0
000006  0000              DCB      0x00,0x00
                  rx_counter0
000008  0000              DCB      0x00,0x00
                  tx_wr_index0
00000a  0000              DCB      0x00,0x00
                  tx_rd_index0
00000c  0000              DCB      0x00,0x00
                  tx_counter0
00000e  0000              DCB      0x00,0x00
                  UART0Status
                          DCD      0x00000000

                          AREA ||area_number.17||, DATA, ALIGN=2

                          EXPORTAS ||area_number.17||, ||.data||
                  UART0Count
                          DCD      0x00000000

                          AREA ||area_number.18||, DATA, ALIGN=0

                          EXPORTAS ||area_number.18||, ||.data||
                  flag0
000000  00                DCB      0x00
