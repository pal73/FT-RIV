; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\sc16is7xx.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\sc16is7xx.d --feedback=.\EXE\UKU_220_IPS_TERMOKOMPENSAT.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x --omf_browse=.\EXE\sc16is7xx.crf sc16is7xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  sc16is700_spi_init PROC
;;;17     //настройка SPI1
;;;18     void sc16is700_spi_init(void)
000000  480e              LDR      r0,|L1.60|
;;;19     {
;;;20     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000002  6801              LDR      r1,[r0,#0]
000004  f0210103          BIC      r1,r1,#3
000008  6001              STR      r1,[r0,#0]
;;;21     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000a  6801              LDR      r1,[r0,#0]
00000c  f0414140          ORR      r1,r1,#0xc0000000
000010  6001              STR      r1,[r0,#0]
;;;22     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  6841              LDR      r1,[r0,#4]
000014  f0210103          BIC      r1,r1,#3
000018  6041              STR      r1,[r0,#4]
;;;23     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001a  6841              LDR      r1,[r0,#4]
00001c  f041010c          ORR      r1,r1,#0xc
000020  6041              STR      r1,[r0,#4]
;;;24     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000022  6841              LDR      r1,[r0,#4]
000024  f0410130          ORR      r1,r1,#0x30
000028  6041              STR      r1,[r0,#4]
;;;25     /*
;;;26     S1SPCCR=100;
;;;27     S1SPCR=0x3f; */
;;;28     
;;;29     LPC_SPI->SPCCR=20;
00002a  4805              LDR      r0,|L1.64|
00002c  f04f0114          MOV      r1,#0x14
000030  60c1              STR      r1,[r0,#0xc]
;;;30     LPC_SPI->SPCR=0x20;
000032  f04f0120          MOV      r1,#0x20
000036  6001              STR      r1,[r0,#0]
;;;31     }
000038  4770              BX       lr
;;;32     
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      0x4002c000
                  |L1.64|
                          DCD      0x40020000

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  sc16is700_wr_buff PROC
;;;17     //настройка SPI1
;;;18     void sc16is700_spi_init(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;19     {
;;;20     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000004  4603              MOV      r3,r0
000006  460e              MOV      r6,r1
000008  f7fffffe          BL       sc16is700_spi_init
;;;21     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000c  f04f0218          MOV      r2,#0x18
                  |L2.16|
000010  f1a20201          SUB      r2,r2,#1
;;;22     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000014  2a00              CMP      r2,#0
000016  d1fb              BNE      |L2.16|
000018  4f12              LDR      r7,|L2.100|
;;;23     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001a  6838              LDR      r0,[r7,#0]
00001c  f0400001          ORR      r0,r0,#1
000020  6038              STR      r0,[r7,#0]
;;;24     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000022  69f8              LDR      r0,[r7,#0x1c]
000024  f0400001          ORR      r0,r0,#1
000028  61f8              STR      r0,[r7,#0x1c]
;;;25     /*
;;;26     S1SPCCR=100;
;;;27     S1SPCR=0x3f; */
;;;28     
;;;29     LPC_SPI->SPCCR=20;
00002a  ea4f7003          LSL      r0,r3,#28
00002e  ea4f6050          LSR      r0,r0,#25
;;;30     LPC_SPI->SPCR=0x20;
000032  f7fffffe          BL       spi1
000036  f04f0400          MOV      r4,#0
;;;31     }
00003a  4d0b              LDR      r5,|L2.104|
00003c  e005              B        |L2.74|
                  |L2.62|
00003e  5d28              LDRB     r0,[r5,r4]
000040  f7fffffe          BL       spi1
000044  f1040401          ADD      r4,r4,#1
000048  b224              SXTH     r4,r4
                  |L2.74|
00004a  42b4              CMP      r4,r6
00004c  dbf7              BLT      |L2.62|
00004e  6838              LDR      r0,[r7,#0]
000050  f0400001          ORR      r0,r0,#1
000054  6038              STR      r0,[r7,#0]
000056  69b8              LDR      r0,[r7,#0x18]
000058  f0400001          ORR      r0,r0,#1
00005c  61b8              STR      r0,[r7,#0x18]
00005e  e8bd81f0          POP      {r4-r8,pc}
;;;32     
                          ENDP

000062  0000              DCW      0x0000
                  |L2.100|
                          DCD      0x2009c000
                  |L2.104|
                          DCD      ||.bss||

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  sc16is700_wr_byte PROC
;;;17     //настройка SPI1
;;;18     void sc16is700_spi_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;19     {
;;;20     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000002  4602              MOV      r2,r0
000004  460d              MOV      r5,r1
000006  f7fffffe          BL       sc16is700_spi_init
;;;21     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000a  f04f0018          MOV      r0,#0x18
                  |L3.14|
00000e  f1a00001          SUB      r0,r0,#1
;;;22     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  2800              CMP      r0,#0
000014  d1fb              BNE      |L3.14|
000016  4c0d              LDR      r4,|L3.76|
000018  6820              LDR      r0,[r4,#0]
;;;23     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001a  f0400001          ORR      r0,r0,#1
00001e  6020              STR      r0,[r4,#0]
000020  69e0              LDR      r0,[r4,#0x1c]
;;;24     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000022  f0400001          ORR      r0,r0,#1
000026  61e0              STR      r0,[r4,#0x1c]
000028  ea4f7002          LSL      r0,r2,#28
;;;25     /*
;;;26     S1SPCCR=100;
;;;27     S1SPCR=0x3f; */
;;;28     
;;;29     LPC_SPI->SPCCR=20;
00002c  ea4f6050          LSR      r0,r0,#25
000030  f7fffffe          BL       spi1
;;;30     LPC_SPI->SPCR=0x20;
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       spi1
;;;31     }
00003a  6820              LDR      r0,[r4,#0]
00003c  f0400001          ORR      r0,r0,#1
000040  6020              STR      r0,[r4,#0]
000042  69a0              LDR      r0,[r4,#0x18]
000044  f0400001          ORR      r0,r0,#1
000048  61a0              STR      r0,[r4,#0x18]
00004a  bd70              POP      {r4-r6,pc}
;;;32     
                          ENDP

                  |L3.76|
                          DCD      0x2009c000

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  sc16is700_rd_byte PROC
;;;17     //настройка SPI1
;;;18     void sc16is700_spi_init(void)
000000  b510              PUSH     {r4,lr}
;;;19     {
;;;20     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000002  4602              MOV      r2,r0
000004  f7fffffe          BL       sc16is700_spi_init
000008  f04f0118          MOV      r1,#0x18
                  |L4.12|
;;;21     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000c  f1a10101          SUB      r1,r1,#1
000010  2900              CMP      r1,#0
;;;22     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  d1fb              BNE      |L4.12|
000014  4c0e              LDR      r4,|L4.80|
000016  6820              LDR      r0,[r4,#0]
000018  f0400001          ORR      r0,r0,#1
;;;23     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001c  6020              STR      r0,[r4,#0]
00001e  69e0              LDR      r0,[r4,#0x1c]
000020  f0400001          ORR      r0,r0,#1
;;;24     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000024  61e0              STR      r0,[r4,#0x1c]
000026  f002000f          AND      r0,r2,#0xf
;;;25     /*
;;;26     S1SPCCR=100;
;;;27     S1SPCR=0x3f; */
;;;28     
;;;29     LPC_SPI->SPCCR=20;
00002a  f04f0180          MOV      r1,#0x80
00002e  ea4100c0          ORR      r0,r1,r0,LSL #3
;;;30     LPC_SPI->SPCR=0x20;
000032  f7fffffe          BL       spi1
000036  20ff              MOVS     r0,#0xff
;;;31     }
000038  f7fffffe          BL       spi1
00003c  b2c0              UXTB     r0,r0
00003e  6821              LDR      r1,[r4,#0]
000040  f0410101          ORR      r1,r1,#1
000044  6021              STR      r1,[r4,#0]
000046  69a1              LDR      r1,[r4,#0x18]
000048  f0410101          ORR      r1,r1,#1
00004c  61a1              STR      r1,[r4,#0x18]
00004e  bd10              POP      {r4,pc}
;;;32     
                          ENDP

                  |L4.80|
                          DCD      0x2009c000

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.5||, ||.text||
                  sc16is700_init_ PROC
;;;17     //настройка SPI1
;;;18     void sc16is700_spi_init(void)
000000  b510              PUSH     {r4,lr}
;;;19     {
;;;20     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000002  2180              MOVS     r1,#0x80
000004  2003              MOVS     r0,#3
000006  f7fffffe          BL       sc16is700_wr_byte
;;;21     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000a  2141              MOVS     r1,#0x41
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       sc16is700_wr_byte
;;;22     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  2100              MOVS     r1,#0
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       sc16is700_wr_byte
;;;23     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001a  21bf              MOVS     r1,#0xbf
00001c  2003              MOVS     r0,#3
00001e  f7fffffe          BL       sc16is700_wr_byte
;;;24     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000022  2110              MOVS     r1,#0x10
000024  2002              MOVS     r0,#2
000026  f7fffffe          BL       sc16is700_wr_byte
;;;25     /*
;;;26     S1SPCCR=100;
;;;27     S1SPCR=0x3f; */
;;;28     
;;;29     LPC_SPI->SPCCR=20;
00002a  2103              MOVS     r1,#3
00002c  4608              MOV      r0,r1
00002e  f7fffffe          BL       sc16is700_wr_byte
;;;30     LPC_SPI->SPCR=0x20;
000032  2106              MOVS     r1,#6
000034  2002              MOVS     r0,#2
000036  f7fffffe          BL       sc16is700_wr_byte
;;;31     }
00003a  2101              MOVS     r1,#1
00003c  2002              MOVS     r0,#2
00003e  f7fffffe          BL       sc16is700_wr_byte
000042  2130              MOVS     r1,#0x30
000044  e8bd4010          POP      {r4,lr}
000048  200f              MOVS     r0,#0xf
00004a  f7ffbffe          B.W      sc16is700_wr_byte
;;;32     
                          ENDP


                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  sc16is700_init PROC
;;;17     //настройка SPI1
;;;18     void sc16is700_spi_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;19     {
;;;20     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000002  4917              LDR      r1,|L6.96|
000004  fbb1f0f0          UDIV     r0,r1,r0
000008  f3c02407          UBFX     r4,r0,#8,#8
;;;21     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000c  b2c5              UXTB     r5,r0
00000e  f04f0180          MOV      r1,#0x80
;;;22     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  f04f0003          MOV      r0,#3
000016  f7fffffe          BL       sc16is700_wr_byte
;;;23     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001a  4629              MOV      r1,r5
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       sc16is700_wr_byte
;;;24     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000022  4621              MOV      r1,r4
000024  2001              MOVS     r0,#1
000026  f7fffffe          BL       sc16is700_wr_byte
;;;25     /*
;;;26     S1SPCCR=100;
;;;27     S1SPCR=0x3f; */
;;;28     
;;;29     LPC_SPI->SPCCR=20;
00002a  21bf              MOVS     r1,#0xbf
00002c  2003              MOVS     r0,#3
00002e  f7fffffe          BL       sc16is700_wr_byte
;;;30     LPC_SPI->SPCR=0x20;
000032  2110              MOVS     r1,#0x10
000034  2002              MOVS     r0,#2
000036  f7fffffe          BL       sc16is700_wr_byte
;;;31     }
00003a  2103              MOVS     r1,#3
00003c  4608              MOV      r0,r1
00003e  f7fffffe          BL       sc16is700_wr_byte
000042  2106              MOVS     r1,#6
000044  2002              MOVS     r0,#2
000046  f7fffffe          BL       sc16is700_wr_byte
00004a  2101              MOVS     r1,#1
00004c  2002              MOVS     r0,#2
00004e  f7fffffe          BL       sc16is700_wr_byte
000052  e8bd4070          POP      {r4-r6,lr}
000056  2130              MOVS     r1,#0x30
000058  200f              MOVS     r0,#0xf
00005a  f7ffbffe          B.W      sc16is700_wr_byte
;;;32     
                          ENDP

00005e  0000              DCW      0x0000
                  |L6.96|
                          DCD      0x00098968

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  putchar_sc16is700 PROC
;;;17     //настройка SPI1
;;;18     void sc16is700_spi_init(void)
000000  4a07              LDR      r2,|L7.32|
;;;19     {
;;;20     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000002  4b06              LDR      r3,|L7.28|
000004  7891              LDRB     r1,[r2,#2]  ; tx_wr_index_sc16is700
000006  5458              STRB     r0,[r3,r1]
000008  1c49              ADDS     r1,r1,#1
;;;21     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000a  b2c8              UXTB     r0,r1
00000c  7090              STRB     r0,[r2,#2]
00000e  2820              CMP      r0,#0x20
000010  d102              BNE      |L7.24|
;;;22     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  f04f0000          MOV      r0,#0
000016  7090              STRB     r0,[r2,#2]
                  |L7.24|
000018  4770              BX       lr
;;;23     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
;;;24     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
;;;25     /*
;;;26     S1SPCCR=100;
;;;27     S1SPCR=0x3f; */
;;;28     
;;;29     LPC_SPI->SPCCR=20;
;;;30     LPC_SPI->SPCR=0x20;
;;;31     }
;;;32     
                          ENDP

00001a  0000              DCW      0x0000
                  |L7.28|
                          DCD      ||.bss||
                  |L7.32|
                          DCD      ||.data||

                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  sc16is700_uart_hndl PROC
;;;17     //настройка SPI1
;;;18     void sc16is700_spi_init(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;19     {
;;;20     SET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
000004  2009              MOVS     r0,#9
000006  f7fffffe          BL       sc16is700_rd_byte
;;;21     SET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
00000a  4e27              LDR      r6,|L8.168|
00000c  7030              STRB     r0,[r6,#0]
00000e  2500              MOVS     r5,#0
000010  b198              CBZ      r0,|L8.58|
;;;22     SET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
000012  462c              MOV      r4,r5
000014  f8df8094          LDR      r8,|L8.172|
000018  4f25              LDR      r7,|L8.176|
;;;23     SET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
00001a  f8df9098          LDR      r9,|L8.180|
00001e  e007              B        |L8.48|
                  |L8.32|
000020  79b0              LDRB     r0,[r6,#6]  ; sc16is700RecieveDisableFlag
;;;24     SET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
000022  b388              CBZ      r0,|L8.136|
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       sc16is700_rd_byte
                  |L8.42|
;;;25     /*
;;;26     S1SPCCR=100;
;;;27     S1SPCR=0x3f; */
;;;28     
;;;29     LPC_SPI->SPCCR=20;
00002a  f1040401          ADD      r4,r4,#1
00002e  b2e4              UXTB     r4,r4
                  |L8.48|
000030  7830              LDRB     r0,[r6,#0]  ; sc16is700ByteAvailable
;;;30     LPC_SPI->SPCR=0x20;
000032  4284              CMP      r4,r0
000034  d201              BCS      |L8.58|
000036  2c05              CMP      r4,#5
;;;31     }
000038  d3f2              BCC      |L8.32|
                  |L8.58|
00003a  2008              MOVS     r0,#8
00003c  f7fffffe          BL       sc16is700_rd_byte
000040  7070              STRB     r0,[r6,#1]
000042  2840              CMP      r0,#0x40
000044  d000              BEQ      |L8.72|
000046  7135              STRB     r5,[r6,#4]
                  |L8.72|
000048  d105              BNE      |L8.86|
00004a  7930              LDRB     r0,[r6,#4]  ; sc16is700TxFifoEmptyCnt
00004c  2805              CMP      r0,#5
00004e  d202              BCS      |L8.86|
000050  f1000001          ADD      r0,r0,#1
000054  7130              STRB     r0,[r6,#4]
                  |L8.86|
000056  7931              LDRB     r1,[r6,#4]  ; sc16is700TxFifoEmptyCnt
000058  2001              MOVS     r0,#1
00005a  2905              CMP      r1,#5
00005c  d021              BEQ      |L8.162|
00005e  7175              STRB     r5,[r6,#5]
                  |L8.96|
000060  78b1              LDRB     r1,[r6,#2]  ; tx_wr_index_sc16is700
000062  b149              CBZ      r1,|L8.120|
000064  78f2              LDRB     r2,[r6,#3]  ; tx_rd_index_sc16is700
000066  4291              CMP      r1,r2
000068  d006              BEQ      |L8.120|
00006a  7972              LDRB     r2,[r6,#5]  ; sc16is700TxPossibleFlag
00006c  b122              CBZ      r2,|L8.120|
00006e  71b0              STRB     r0,[r6,#6]
000070  2000              MOVS     r0,#0
000072  f7fffffe          BL       sc16is700_wr_buff
000076  70b5              STRB     r5,[r6,#2]
                  |L8.120|
000078  2005              MOVS     r0,#5
00007a  f7fffffe          BL       sc16is700_rd_byte
00007e  0640              LSLS     r0,r0,#25
000080  d500              BPL      |L8.132|
000082  71b5              STRB     r5,[r6,#6]
                  |L8.132|
000084  e8bd87f0          POP      {r4-r10,pc}
                  |L8.136|
000088  e7ff              B        |L8.138|
                  |L8.138|
00008a  2000              MOVS     r0,#0
00008c  f7fffffe          BL       sc16is700_rd_byte
000090  7839              LDRB     r1,[r7,#0]  ; modbus_rx_buffer_ptr
000092  f8080001          STRB     r0,[r8,r1]
000096  f1010101          ADD      r1,r1,#1
00009a  7039              STRB     r1,[r7,#0]
00009c  f8895000          STRB     r5,[r9,#0]
0000a0  e7c3              B        |L8.42|
                  |L8.162|
0000a2  7170              STRB     r0,[r6,#5]
0000a4  e7dc              B        |L8.96|
;;;32     
                          ENDP

0000a6  0000              DCW      0x0000
                  |L8.168|
                          DCD      ||.data||
                  |L8.172|
                          DCD      modbus_rx_buffer
                  |L8.176|
                          DCD      modbus_rx_buffer_ptr
                  |L8.180|
                          DCD      modbus_timeout_cnt

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  tx_buffer_sc16is700
                          %        32

                          AREA ||.data||, DATA, ALIGN=0

                  sc16is700ByteAvailable
000000  00                DCB      0x00
                  sc16is700TxFifoLevel
000001  00                DCB      0x00
                  tx_wr_index_sc16is700
000002  00                DCB      0x00
                  tx_rd_index_sc16is700
000003  00                DCB      0x00
                  sc16is700TxFifoEmptyCnt
000004  00                DCB      0x00
                  sc16is700TxPossibleFlag
000005  00                DCB      0x00
                  sc16is700RecieveDisableFlag
000006  00                DCB      0x00
